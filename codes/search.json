[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fiscomp",
    "section": "",
    "text": "Texto em desenvolvimento contínuo, favor reportar os erros.\nAgradecimentos a todos os meus amigos que revisaram os projetos.\nLivro gerado com https://quarto.org/docs/books."
  },
  {
    "objectID": "Projeto1/projeto1.html",
    "href": "Projeto1/projeto1.html",
    "title": "1  Aquecimento",
    "section": "",
    "text": "Objetivo Geral: Quebrar o gelo com a linguagem Julia.\nObjetivo Especifico: Resolver vários exercícios de pequena complexidade, para mostrar funcionalidades da linguagem que serão recorrente durante o curso\nConteúdo: Instalação da linguagem e configuração do VS Code; Entrada e Saída; Álgebra Linear; Estruturas de repetição; Erros numéricos; Multiple-Dispatch\nSe você já sabe Julia, ou consegue resolver os exercícios sem dificuldades, simplesmente pule esse projeto."
  },
  {
    "objectID": "Projeto1/projeto1.html#vetores-e-matrizes",
    "href": "Projeto1/projeto1.html#vetores-e-matrizes",
    "title": "1  Aquecimento",
    "section": "1.1 Vetores e Matrizes",
    "text": "1.1 Vetores e Matrizes\nÉ muito difícil você fazer Física sem usar vetores ou matrizes, por isso você precisa dominar operações básicas de Algebra Linear.\n\nDados 3 vetores \\(\\vec{a} = (1,-1,1)\\), \\(\\vec{b} = (-3,1,5)\\) e \\(\\vec{c} = (4,-7,3)\\) :\n\nCalcule a norma (valor absoluto Euclidiano) de cada vetor.\nCalcule o produto escalar e vetorial entre todas as combinações de \\(\\vec{a},\\vec{b}\\) e \\(\\vec{c}\\).\nCalcule o ângulo entre os vetores \\(\\vec{ab}\\) e \\(\\vec{ac}\\).\nCrie a matriz \\(A = [\\vec{a}\\; \\vec{b}\\; \\vec{c}]\\) e calcule seu determinante."
  },
  {
    "objectID": "Projeto1/projeto1.html#leitura-e-escrita",
    "href": "Projeto1/projeto1.html#leitura-e-escrita",
    "title": "1  Aquecimento",
    "section": "1.2 Leitura e Escrita",
    "text": "1.2 Leitura e Escrita\nOutra tarefa recorrente em programação é leitura de dados em arquivo para posterior análise.\n\nVoltaremos aos tempos de ensino médio, e vamos calcular tempo de queda livre \\(t_q = \\sqrt{2h/g}\\), porém não apenas na Terra.\n\nPesquise o valor da aceleração da gravidade, \\(g\\), em diferentes planetas do sistema solar. Salve seus resultados em um arquivo .txt, cuja primeira coluna é o nome do planeta, e na segunda o valor de \\(g\\). Separe os dados com uma vírgula.\nUse o pacote DelimitedFiles.jl para ler os dados em uma matriz.\nPara cada planeta, calcule quanto tempo um objeto demora para atingir o solo, dado que a altura inicial é \\(h=120 m\\).\nPor meio de interpolação de texto, exiba seus resultados como: \"[planeta]: tempo de queda é [tempo] segundos\".\nUse funções padrões de Julia, e descubra qual o planeta que demora mais e menos tempo para a queda acontecer."
  },
  {
    "objectID": "Projeto1/projeto1.html#estrutura-de-repetição",
    "href": "Projeto1/projeto1.html#estrutura-de-repetição",
    "title": "1  Aquecimento",
    "section": "1.3 Estrutura de Repetição",
    "text": "1.3 Estrutura de Repetição\n\nIgnorando um gama gigantesca de fatores, vamos assumir, o cenário irrealístico, de que a temperatura anual de uma cidade na região Sudeste do Brasil é descrito por uma função cosseno, cuja miníma anual é 5°, e máxima anual é 35°, acontecendo no primeiro dia do Verão, dia 21 de dezembro (que corresponde ao 355° dia do ano).\n\nCrie uma função que simule o comportamento de temperatura anual.\nVamos trabalhar as datas como índices. Crie um vetor com todos os números de 1 até 365.\nCalcule a temperatura anual usando for, map e o operador broadcasting, representado por um ponto \".\"\nCrie uma figura com seu resultado, usando o pacote Plots.jl.\n\n\n\n\n\n\n\n\nDica\n\n\n\nProcure por Trig word problem: modeling annual temperature na Internet."
  },
  {
    "objectID": "Projeto1/projeto1.html#outra-sessão",
    "href": "Projeto1/projeto1.html#outra-sessão",
    "title": "1  Aquecimento",
    "section": "1.4 Outra sessão",
    "text": "1.4 Outra sessão\n\nmais textos\nmais textos\nmais textos"
  },
  {
    "objectID": "Projeto1/projeto1.html#trigonometria",
    "href": "Projeto1/projeto1.html#trigonometria",
    "title": "1  Aquecimento",
    "section": "1.4 Trigonometria",
    "text": "1.4 Trigonometria\nComputadores são máquinas incríveis para fazer contas, mas ainda sim possuem limites. Vamos testar um deles com o cálculo da função seno.\n\nCrie um programa para estimar o valor de sen(x) através de sua expansão de Taylor truncada em \\(N\\) elementos: \\[\n    sin(x) = \\sum_{n=0}^{N} (-1)^n \\frac{x^{2n+1}}{(2n+1)!}\n\\]\n\n\nEscolha um valor de \\(x\\) e calcule a série para \\(N\\) diferentes. Quanto maior \\(N\\), melhor será seus resultado, e nós desejamos verificar isso exibindo os erro absoluto em um plot de escala logarítmica. Use a biblioteca Plots.jl para isso.\nPara quais valores de \\(N\\) você não consegue mais realizar a somatória ? Por quê?\n\n\n\n\n\n\n\nNota\n\n\n\nerro absoluto = \\(|y_{estimado} - y_{exato}|\\).\nUse a função sin(x) que já vem por padrão em Julia para obter o valor exato."
  },
  {
    "objectID": "Projeto1/projeto1.html#resistores-em-série",
    "href": "Projeto1/projeto1.html#resistores-em-série",
    "title": "1  Aquecimento",
    "section": "1.5 Resistores em Série",
    "text": "1.5 Resistores em Série\nSerá inevitável que você fará uso de pacotes prontos. E é comum em Julia a criação de novos tipos de dados - tipos no sentido Int ou Float. Esse recurso permite que você desenvolva códigos mais inteligível e tudo começa com struct. Nesse exercício criaremos um tipo de dado para ajudar a calcular resistências em série de circuitos elétricos.\n\nDefina um struct1 chamado resistor com 2 campos do tipo Number: Resistência, \\(R\\) e Corrente, \\(i\\).\n\n\nInstancie 2 resistores em série, com \\(i = 4A\\), e \\(R_1 = 5\\Omega\\) e \\(R_2 = 20\\Omega\\).\nCrie uma função que receba o tipo de entrada resistor e retorne a tensão \\(U = R\\cdot i\\).\nCrie um novo método que some 2 resistências em série e retorne um novo objeto do tipo resistor."
  }
]
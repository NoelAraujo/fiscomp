# Aquecimento


**Objetivo Geral**: Quebrar o gelo com a linguagem Julia.

**Objetivo Especifico**: Resolver vários exercícios de pequena complexidade, para mostrar funcionalidades da linguagem que serão recorrente durante o curso

**Conteúdo**: Instalação da linguagem e configuração do VS Code; Entrada e Saída; Álgebra Linear; Estruturas de repetição; Erros numéricos; Multiple-Dispatch

Se você já sabe Julia, ou consegue resolver os exercícios sem dificuldades, simplesmente pule esse projeto.

## Vetores e Matrizes
É muito difícil você fazer Física sem usar vetores ou matrizes, por isso você precisa dominar operações básicas de Algebra Linear.

(@) Dados 3 vetores  $\vec{a} = (1,-1,1)$,  $\vec{b} = (-3,1,5)$ e $\vec{c} = (4,-7,3)$ \footnote{Valores copiados de \cite{p1_ex2}} :

    a. Calcule a norma (valor absoluto Euclidiano) de cada vetor.

    a. Calcule o produto escalar e vetorial entre todas as combinações de  $\vec{a},\vec{b}$ e $\vec{c}$.

    a. Calcule o ângulo entre os vetores $\vec{ab}$ e $\vec{ac}$.

    a. Crie a matriz $A = [\vec{a}\; \vec{b}\; \vec{c}]$ e calcule seu determinante.




## Leitura e Escrita

Outra tarefa recorrente em programação é leitura de dados em arquivo para posterior análise.

(@) Voltaremos aos tempos de ensino médio, e vamos calcular tempo de queda livre $t_q = \sqrt{2h/g}$, porém não apenas na Terra.

    a. Pesquise o valor da aceleração da gravidade, $g$, em diferentes planetas do sistema solar. Salve seus resultados em um arquivo `.txt`, cuja primeira coluna é o nome do planeta, e na segunda o valor de $g$. Separe os dados com uma vírgula.

    a. Use o pacote `DelimitedFiles.jl` para ler os dados em uma matriz.

    a. Para cada planeta, calcule quanto tempo um objeto demora para atingir o solo, dado que a altura inicial é $h=120 m$.

    a. Por meio de interpolação de texto, exiba seus resultados como: `"[planeta]: tempo de queda é [tempo] segundos"`.

    a. Use funções padrões de Julia, e descubra qual o planeta que demora *mais* e *menos* tempo para a queda acontecer.



## Estrutura de Repetição

(@) Ignorando um gama gigantesca de fatores, vamos assumir, o cenário irrealístico, de que a temperatura anual de uma cidade na região Sudeste do Brasil é descrito por uma função cosseno, cuja miníma anual é 5°, e máxima anual é 35°, acontecendo no primeiro dia do Verão, dia 21 de dezembro (que corresponde ao 355° dia do ano).

    a. Crie uma função que simule o comportamento de temperatura anual.

    a. Vamos trabalhar as datas como índices. Crie um vetor com todos os números de 1 até 365.

    a. Calcule a temperatura anual usando `for`, `map` e o operador `broadcasting`, representado por um ponto `"."`

    a. Crie uma figura com seu resultado, usando o pacote `Plots.jl`.


::: {.callout-tip collapse="true"}
## Dica
Procure por **Trig word problem: modeling annual temperature** na Internet.
:::


## Trigonometria

Computadores são máquinas incríveis para fazer contas, mas ainda sim possuem limites. Vamos testar um deles com o cálculo da função seno.

(@) Crie um programa para estimar o valor  de *sen(x)* através de sua expansão de Taylor truncada em $N$ elementos:
    $$
       sin(x) = \sum_{n=0}^{N} (-1)^n \frac{x^{2n+1}}{(2n+1)!}
    $$
    a. Escolha um valor de $x$ e calcule a série para $N$ diferentes. Quanto maior $N$, melhor será seus resultado, e nós desejamos verificar isso exibindo os erro absoluto  em um plot de escala logarítmica. Use a biblioteca `Plots.jl` para isso.

    a. Para quais valores de $N$ você não consegue mais realizar a somatória ? Por quê?


::: {.callout-note collapse="true"}
## Observação
erro absoluto = $|y_{estimado} - y_{exato}|$.

Use a função `sin(x)` que já vem por padrão em Julia para obter o valor exato.
:::

## Resistores em Série

Será inevitável que você fará uso de pacotes prontos. E é comum em Julia a criação de novos tipos de dados - `tipos` no sentido `Int` ou `Float`. Esse recurso permite que você desenvolva códigos mais inteligível e tudo começa com `struct`. Nesse exercício criaremos um tipo de dado para ajudar a calcular resistências em série de circuitos elétricos.

(@) Defina um `struct`^[É esperado que você busque na internet por exemplos mínimos de como trabalhar com `struct`.] chamado `resistor` com 2 campos do tipo `Number`: Resistência, $R$ e Corrente, $i$.
    a. Instancie 2 resistores em série, com $i = 4A$, e $R_1 = 5\Omega$ e $R_2 = 20\Omega$.
    a. Crie uma função que receba o tipo de entrada `resistor` e retorne a tensão $U = R\cdot i$.
    a. Crie um novo *método* que some 2 resistências em série e retorne um novo objeto do tipo `resistor`.
